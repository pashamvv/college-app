import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, WebAppInfo
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

TOKEN = "7621000610:AAHgzBhpQ2xjaZFbqLrOMiJvPSM2AxOJHsY"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

users_data = {}

class Registration(StatesGroup):
    full_name = State()
    group = State()

def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="show_schedule")
    builder.button(text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç–æ–¥–∏–∫–∏", callback_data="show_methods")
    builder.button(text="üîî –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", callback_data="show_bell_schedule")
    builder.button(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url="https://mini-app-eabee.web.app/"))
    return builder.as_markup()

@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in users_data:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {users_data[user_id]['full_name']}! üëã", reply_markup=get_main_menu())
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û.")
        await state.set_state(Registration.full_name)

@dp.message(Registration.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.")
    await state.set_state(Registration.group)

@dp.message(Registration.group)
async def process_group(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    users_data[user_id] = {"full_name": data["full_name"], "group": message.text}
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url="https://mini-app-eabee.web.app/"))]],
        resize_keyboard=True
    )
    await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_menu())
    await state.clear()

@dp.message(Command("miniapp"))
async def send_miniapp_button(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url="https://mini-app-eabee.web.app/"))]],
        resize_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:", reply_markup=keyboard)

@dp.callback_query(F.data.in_(["show_schedule", "show_methods", "show_bell_schedule"]))
async def callback_handler(call: types.CallbackQuery):
    responses = {
        "show_schedule": "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:*\nüïò 08:00 - 09:30 | –ü–∞—Ä–∞ 1\nüïô 09:45 - 11:15 | –ü–∞—Ä–∞ 2",
        "show_methods": "üìñ *–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*\n1Ô∏è‚É£ –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n2Ô∏è‚É£ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
        "show_bell_schedule": "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\nüïò 08:00 - 09:30 | 1-—è –ø–∞—Ä–∞\nüïô 09:45 - 11:15 | 2-—è –ø–∞—Ä–∞"
    }
    await call.message.answer(responses[call.data], parse_mode="Markdown")
    await call.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

    